'use strict';

// tests for addProductToCart
// Generated by serverless-mocha-plugin

const mochaPlugin = require('serverless-mocha-plugin');
const expect = mochaPlugin.chai.expect;
let wrapped = mochaPlugin.getWrapper('addProductToCart', '/handler.js', 'addProductToCart');

describe('addProductToCart', () => {
  before((done) => {
    done();
  });

  it('should return 200 when providing valid data', async () => {
    const response = await wrapped.run({
      body: JSON.stringify({
        "user_id": "1",
        "product_id": "6245b52a8f1cfd769ee344b6",
        "quantity": 2
      })
    });

    expect(response).to.not.be.empty;
    expect(response.body).to.not.be.empty;
    expect(response.statusCode).to.be.eql(200);
  });

  it('should return 500 when product id is null', async () => {
    const response = await wrapped.run({
      body: JSON.stringify({
        "user_id": "1",
        "quantity": 2
      })
    });

    expect(response).to.not.be.empty;
    expect(response.body).to.not.be.empty;
    expect(response.statusCode).to.be.eql(500);
  });

  it('should return 500 when user id is null', async () => {
    const response = await wrapped.run({
      body: JSON.stringify({
        "product_id": "6245b52a8f1cfd769ee344b",
        "quantity": 2
      })
    });

    expect(response).to.not.be.empty;
    expect(response.body).to.not.be.empty;
    expect(response.statusCode).to.be.eql(500);
  });

  it('should return 500 when quantity is null', async () => {
    const response = await wrapped.run({
      body: JSON.stringify({
        "product_id": "6245b52a8f1cfd769ee344b6",
        "user_id": "1"
      })
    });

    expect(response).to.not.be.empty;
    expect(response.body).to.not.be.empty;
    expect(response.statusCode).to.be.eql(500);
  });

  it('should return 500 when quantity is string', async () => {
    const response = await wrapped.run({
      body: JSON.stringify({
        "product_id": "6245b52a8f1cfd769ee344b6",
        "user_id": "1",
        "quantity": "test"
      })
    });

    expect(response).to.not.be.empty;
    expect(response.body).to.not.be.empty;
    expect(response.statusCode).to.be.eql(500);
  });
});
